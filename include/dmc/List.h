// Copyright 01-Dic-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// List (immutable) structure.

#ifndef DM_LIST_H
  #define DM_LIST_H

#include "Opt.h"

/// List (immutable) structure.
struct list_List {
  struct list_List *next;
  void *value;
};

/// List (immutable) structure.
typedef struct list_List List;
typedef struct opt_Opt Opt;
typedef struct arr_Arr Arr;

/// Creates a new List.
List *list_new(void);

/// Returns the number of elements. (O(n) operation).
int list_size(List *this);

/// Returns every element of 'this' less the first one. If "this" is
/// empty, throws an exception.
List *list_tail(List *this);

/// Returns the first element of 'this'. If "this" is empty.
/// throws an exception.
void *list_head (List *this);

/// Returns the element in 'ix' position -- head is in position 0.
/// (O(n) operation).
Opt *list_get (List *this, int ix);

/// Returns '1' if 'this' is empty.
int list_empty(List *this);

/// Adds 'o' at head. 'o' must be not NULL.
List *list_cons(List *this, void *o);

/// Returns 'this + l'.
List *list_cat(List *this, List *l);

/// list_reverse returns this in reverse order.
List *list_reverse(List *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
List *list_sort (List *this, int (*greater)(void *e1, void *e2));

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int list_all (List *this, int (*pred)(void *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int list_any (List *this, int (*pred)(void *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int list_index (List *this, int (*pred)(void *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int list_last_index (List *this, int (*pred)(void *e));

/// Returns the first element which pruduces '1' with 'pred' or 'opt_none'.
Opt *list_find(List *this, int (*pred)(void *e));

/// Returns the last element which pruduces '1' with 'pred' or 'opt_none'.
Opt *list_find_last(List *this, int (*pred)(void *e));

/// Returns a new List with every element which returns '1' with 'pred'.
List *list_filter (List *this, int (*pred)(void *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
List *list_take (List *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'pred'.
List *list_takef (List *this, int (*pred)(void *e));

/// Returns a new Arr with elements left after arr_take.
List *list_drop (List *this, int n);

/// Returns a new Arr with elements left after arr_takef.
List *list_dropf (List *this, int (*pred)(void *e));

/// Returns a new List with elements generated by converter.
List *list_map (List *this, void *(*converter)(void *e));

/// Returns a new List whit the first element generated by conv1 and the rest
/// by conv2.
List *list_map2 (List *this, void *(*conv1)(void *e), void *(*conv2)(void *e));

/// Returns a new List mixing values of 'l1' and 'l2'. The size of the resultant
/// List is the less of 'l1' size and 'l2' size.
List *list_zip (List *l1, List *l2, void *(*converter)(void *e1, void *e2));

/// Returns a new List mixing values of 'l1', 'l2' and 'l3'. The List of the
/// resultant List is the less of 'l1' size, 'l2' size and 'l3' size.
List *list_zip3 (
  List *l1, List *l2, List *l3, void*(*converter)(void*e1, void*e2, void*e3)
);

/// list_to_arr returns an Arr with 'this' elements.
Arr *list_to_arr (List *this);

/// list_from_arr returns a list with 'a' elements.
List *list_from_arr (Arr *a);

/// list_to_json returns a serialization of 'this' using 'to' to.
/// convert elements.
char *list_to_js(List *this, char *(*to)(void *));

/// list_from_json restores a serialized List using 'from' to convert elements.
List *list_from_js(char *js, void *(*from)(char *));

#endif
