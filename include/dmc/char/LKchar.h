// Copyright 08-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// List[Kchar *].

#ifndef DMC_CHAR_LKCHAR_H
  #define DMC_CHAR_LKCHAR_H

#include "dmc/List.h"
#include "dmc/char/OKchar.h"
#include "dmc/char/AKchar.h"

#include "dmc/char/Kchar.h"

/// List[Kchar *].
struct lKchar_LKchar {
  struct lKchar_LKchar *next;
  Kchar *value;
};

/// List[Kchar *].
typedef struct lKchar_LKchar LKchar;

/// Creates a new List.
LKchar *lKchar_new(void);

/// Returns the number of elements. (O(n) operation).
int lKchar_size(LKchar *this);

/// Returns every element of 'this' less the first one. If "this" is
/// empty, throws an exception.
LKchar *lKchar_tail(LKchar *this);

/// Returns the first element of 'this'. If "this" is empty.
/// throws an exception.
Kchar *lKchar_head (LKchar *this);

/// Returns the element in 'ix' position -- head is in position 0.
/// (O(n) operation).
OKchar *lKchar_get (LKchar *this, int ix);

/// Returns '1' if 'this' is empty.
int lKchar_empty(LKchar *this);

/// Adds 'o' at head. 'o' must be not NULL.
LKchar *lKchar_cons(LKchar *this, Kchar *o);

/// Returns 'this + l'.
LKchar *lKchar_cat(LKchar *this, LKchar *l);

/// lKchar_reverse returns this in reverse order.
LKchar *lKchar_reverse(LKchar *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
LKchar *lKchar_sort (LKchar *this, int (*greater)(Kchar *e1, Kchar *e2));

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int lKchar_all (LKchar *this, int (*pred)(Kchar *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int lKchar_any (LKchar *this, int (*pred)(Kchar *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int lKchar_index (LKchar *this, int (*pred)(Kchar *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int lKchar_last_index (LKchar *this, int (*pred)(Kchar *e));

/// Returns the first element which pruduces '1' with 'pred' or 'opt_none'.
OKchar *lKchar_find(LKchar *this, int (*pred)(Kchar *e));

/// Returns the last element which pruduces '1' with 'pred' or 'opt_none'.
OKchar *lKchar_find_last(LKchar *this, int (*pred)(Kchar *e));

/// Returns a new List with every element which returns '1' with 'pred'.
LKchar *lKchar_filter (LKchar *this, int (*pred)(Kchar *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
LKchar *lKchar_take (LKchar *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'pred'.
LKchar *lKchar_takef (LKchar *this, int (*pred)(Kchar *e));

/// Returns a new Arr with elements left after arr_take.
LKchar *lKchar_drop (LKchar *this, int n);

/// Returns a new Arr with elements left after arr_takef.
LKchar *lKchar_dropf (LKchar *this, int (*pred)(Kchar *e));

/// Returns a new List with elements generated by converter.
List *lKchar_map (LKchar *this, void *(*converter)(Kchar *e));

/// Returns a new List whit the first element generated by conv1 and the rest
/// by conv2.
List *lKchar_map2 (LKchar *this, void *(*conv1)(Kchar *e), void *(*conv2)(Kchar *e));

/// Returns a new List mixing values of 'l1' and 'l2'. The size of the resultant
/// List is the less of 'l1' size and 'l2' size.
List *lKchar_zip (LKchar *l1, LKchar *l2, void *(*converter)(Kchar *e1, Kchar *e2));

/// Returns a new List mixing values of 'l1', 'l2' and 'l3'. The List of the
/// resultant List is the less of 'l1' size, 'l2' size and 'l3' size.
List *lKchar_zip3 (
  LKchar *l1, LKchar *l2, LKchar *l3,
  void *(*converter)(Kchar *e1, Kchar *e2, Kchar *e3)
);

/// Returns an Arr with 'this' elements.
AKchar *lKchar_to_arr (LKchar *this);

/// Returns a list with 'a' elements.
LKchar *lKchar_from_arr (AKchar *a);

/// lKchar_to_json returns a serialization of 'this' using 'to' to.
/// convert elements.
char *lKchar_to_js(LKchar *this, char *(*to)(Kchar *));

/// lKchar_from_json restores a serialized List using 'from' to convert elements.
LKchar *lKchar_from_js(char *js, Kchar *(*from)(char *));


//--// Not remove

#endif