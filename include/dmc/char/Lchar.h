// Copyright 08-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// List[char *].

#ifndef DMC_CHAR_LCHAR_H
  #define DMC_CHAR_LCHAR_H

#include "dmc/List.h"
#include "dmc/char/Ochar.h"
#include "dmc/char/Achar.h"

/// List[char *].
struct lchar_Lchar {
  struct lchar_Lchar *next;
  char *value;
};

/// List[char *].
typedef struct lchar_Lchar Lchar;

/// Creates a new List.
Lchar *lchar_new(void);

/// Returns the number of elements. (O(n) operation).
int lchar_size(Lchar *this);

/// Returns every element of 'this' less the first one. If "this" is
/// empty, throws an exception.
Lchar *lchar_tail(Lchar *this);

/// Returns the first element of 'this'. If "this" is empty.
/// throws an exception.
char *lchar_head (Lchar *this);

/// Returns the element in 'ix' position -- head is in position 0.
/// (O(n) operation).
Ochar *lchar_get (Lchar *this, int ix);

/// Returns '1' if 'this' is empty.
int lchar_empty(Lchar *this);

/// Adds 'o' at head. 'o' must be not NULL.
Lchar *lchar_cons(Lchar *this, char *o);

/// Returns 'this + l'.
Lchar *lchar_cat(Lchar *this, Lchar *l);

/// lchar_reverse returns this in reverse order.
Lchar *lchar_reverse(Lchar *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
Lchar *lchar_sort (Lchar *this, int (*greater)(char *e1, char *e2));

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int lchar_all (Lchar *this, int (*pred)(char *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int lchar_any (Lchar *this, int (*pred)(char *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int lchar_index (Lchar *this, int (*pred)(char *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int lchar_last_index (Lchar *this, int (*pred)(char *e));

/// Returns the first element which pruduces '1' with 'pred' or 'opt_none'.
Ochar *lchar_find(Lchar *this, int (*pred)(char *e));

/// Returns the last element which pruduces '1' with 'pred' or 'opt_none'.
Ochar *lchar_find_last(Lchar *this, int (*pred)(char *e));

/// Returns a new List with every element which returns '1' with 'pred'.
Lchar *lchar_filter (Lchar *this, int (*pred)(char *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
Lchar *lchar_take (Lchar *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'pred'.
Lchar *lchar_takef (Lchar *this, int (*pred)(char *e));

/// Returns a new Arr with elements left after arr_take.
Lchar *lchar_drop (Lchar *this, int n);

/// Returns a new Arr with elements left after arr_takef.
Lchar *lchar_dropf (Lchar *this, int (*pred)(char *e));

/// Returns a new List with elements generated by converter.
List *lchar_map (Lchar *this, void *(*converter)(char *e));

/// Returns a new List whit the first element generated by conv1 and the rest
/// by conv2.
List *lchar_map2 (Lchar *this, void *(*conv1)(char *e), void *(*conv2)(char *e));

/// Returns a new List mixing values of 'l1' and 'l2'. The size of the resultant
/// List is the less of 'l1' size and 'l2' size.
List *lchar_zip (Lchar *l1, Lchar *l2, void *(*converter)(char *e1, char *e2));

/// Returns a new List mixing values of 'l1', 'l2' and 'l3'. The List of the
/// resultant List is the less of 'l1' size, 'l2' size and 'l3' size.
List *lchar_zip3 (
  Lchar *l1, Lchar *l2, Lchar *l3,
  void *(*converter)(char *e1, char *e2, char *e3)
);

/// Returns an Arr with 'this' elements.
Achar *lchar_to_arr (Lchar *this);

/// Returns a list with 'a' elements.
Lchar *lchar_from_arr (Achar *a);

/// lchar_to_json returns a serialization of 'this' using 'to' to.
/// convert elements.
char *lchar_to_js(Lchar *this, char *(*to)(char *));

/// lchar_from_json restores a serialized List using 'from' to convert elements.
Lchar *lchar_from_js(char *js, char *(*from)(char *));


//--// Not remove

#endif