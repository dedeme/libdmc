// Copyright 08-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Kchar *].

#ifndef DMC_CHAR_AKCHAR_H
  #define DMC_CHAR_AKCHAR_H

#include "dmc/Arr.h"
#include "dmc/char/OKchar.h"

#include "dmc/char/Kchar.h"

/// Arr[Kchar *].
struct aKchar_AKchar {
  Kchar **es; // Start elements.
  Kchar **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Kchar **endbf; // End buffer.
};

/// Arr[Kchar *].
typedef struct aKchar_AKchar AKchar;

/// Creates a new Array with buffer size of 15 elements.
AKchar *aKchar_new (void);

/// 'buffer' must be > 0.
AKchar *aKchar_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AKchar *aKchar_new_from (Kchar *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AKchar *aKchar_new_c (int size, Kchar **es);

/// Returns a new array with elements of 'this'.
AKchar *aKchar_copy (AKchar *this);

///
int aKchar_size (AKchar *this);

/// Resturn the element at position ix.
Kchar *aKchar_get (AKchar *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aKchar_push (AKchar *this, Kchar *e);

/// Returns and removes the last element.
Kchar *aKchar_pop (AKchar *this);

/// Returns the las element.
Kchar *aKchar_peek (AKchar *this);

/// Sets the element at position ix.
void aKchar_set (AKchar *this, int ix, Kchar *e);

/// Inserts an element at position ix.
void aKchar_insert (AKchar *this, int ix, Kchar *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aKchar_remove (AKchar *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aKchar_cat (AKchar *this, AKchar *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aKchar_insert_arr (AKchar *this, int ix, AKchar *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aKchar_remove_range (AKchar *this, int begin, int end);

/// Removes every element of 'this'.
void aKchar_clear (AKchar *this);

/// Reverses elements of 'this'.
void aKchar_reverse (AKchar *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aKchar_sortf (AKchar *this, int (*greater)(Kchar *e1, Kchar *e2));

/// aKchar_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aKchar_shuffle (AKchar *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aKchar_all (AKchar *this, int (*pred)(Kchar *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aKchar_any (AKchar *this, int (*pred)(Kchar *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aKchar_index (AKchar *this, int (*pred)(Kchar *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aKchar_last_index (AKchar *this, int (*pred)(Kchar *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OKchar *aKchar_find(AKchar *this, int (*pred)(Kchar *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OKchar *aKchar_find_last(AKchar *this, int (*pred)(Kchar *e));

/// aKchar_filter_in removes every element which returns '0' with 'pred'.
void aKchar_filter_in (AKchar *this, int (*pred)(Kchar *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AKchar *aKchar_take (AKchar *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AKchar *aKchar_takef (AKchar *this, int (*predicate)(Kchar *e));

/// Returns a new Arr with elements left after aKchar_take.
AKchar *aKchar_drop (AKchar *this, int n);

/// Returns a new Arr with elements left after aKchar_takef.
AKchar *aKchar_dropf (AKchar *this, int (*predicate)(Kchar *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AKchar *aKchar_filter_to (AKchar *this, int (*predicate)(Kchar *e));

/// Returns a new Arr with elements generated by converter.
Arr *aKchar_map (AKchar *this, void *(*converter)(Kchar *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aKchar_map2 (AKchar *this, void *(*conv1)(Kchar *e), void *(*conv2)(Kchar *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aKchar_zip (AKchar *a1, AKchar *a2, void *(*converter)(Kchar *e1, Kchar *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aKchar_zip3 (
  AKchar *a1, AKchar *a2, AKchar *a3,
  void *(*conveter)(Kchar*e1, Kchar*e2, Kchar*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AKchar *aKchar_duplicates (AKchar *this, int (feq)(Kchar *e1, Kchar *e2));

/// Returns this JSONized.
///   this: Container.
///   to  : Converter of container element to JSON.
char *aKchar_to_js (AKchar *this, char *(*to)(Kchar *e));

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
///   from: Converter from JSON to container element.
AKchar *aKchar_from_js (char *js, Kchar *(*from)(char *ejs));


//--// Not remove

#endif