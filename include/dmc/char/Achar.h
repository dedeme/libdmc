// Copyright 08-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[char *].

#ifndef DMC_CHAR_ACHAR_H
  #define DMC_CHAR_ACHAR_H

#include "dmc/Arr.h"
#include "dmc/char/Ochar.h"

/// Arr[char *].
struct achar_Achar {
  char **es; // Start elements.
  char **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  char **endbf; // End buffer.
};

/// Arr[char *].
typedef struct achar_Achar Achar;

/// Creates a new Array with buffer size of 15 elements.
Achar *achar_new (void);

/// 'buffer' must be > 0.
Achar *achar_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
Achar *achar_new_from (char *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
Achar *achar_new_c (int size, char **es);

/// Returns a new array with elements of 'this'.
Achar *achar_copy (Achar *this);

///
int achar_size (Achar *this);

/// Resturn the element at position ix.
char *achar_get (Achar *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void achar_push (Achar *this, char *e);

/// Returns and removes the last element.
char *achar_pop (Achar *this);

/// Returns the las element.
char *achar_peek (Achar *this);

/// Sets the element at position ix.
void achar_set (Achar *this, int ix, char *e);

/// Inserts an element at position ix.
void achar_insert (Achar *this, int ix, char *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void achar_remove (Achar *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void achar_cat (Achar *this, Achar *other);

/// Inserts pointer to elements of 'other' at 'ix'
void achar_insert_arr (Achar *this, int ix, Achar *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void achar_remove_range (Achar *this, int begin, int end);

/// Removes every element of 'this'.
void achar_clear (Achar *this);

/// Reverses elements of 'this'.
void achar_reverse (Achar *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void achar_sort (Achar *this, int (*greater)(char *e1, char *e2));

/// achar_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void achar_shuffle (Achar *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int achar_all (Achar *this, int (*pred)(char *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int achar_any (Achar *this, int (*pred)(char *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int achar_index (Achar *this, int (*pred)(char *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int achar_last_index (Achar *this, int (*pred)(char *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
Ochar *achar_find(Achar *this, int (*pred)(char *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
Ochar *achar_find_last(Achar *this, int (*pred)(char *e));

/// achar_filter_in removes every element which returns '0' with 'pred'.
void achar_filter_in (Achar *this, int (*pred)(char *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
Achar *achar_take (Achar *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
Achar *achar_takef (Achar *this, int (*predicate)(char *e));

/// Returns a new Arr with elements left after achar_take.
Achar *achar_drop (Achar *this, int n);

/// Returns a new Arr with elements left after achar_takef.
Achar *achar_dropf (Achar *this, int (*predicate)(char *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
Achar *achar_filter_to (Achar *this, int (*predicate)(char *e));

/// Returns a new Arr with elements generated by converter.
Arr *achar_map (Achar *this, void *(*converter)(char *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *achar_map2 (Achar *this, void *(*conv1)(char *e), void *(*conv2)(char *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *achar_zip (Achar *a1, Achar *a2, void *(*converter)(char *e1, char *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *achar_zip3 (
  Achar *a1, Achar *a2, Achar *a3,
  void *(*conveter)(char*e1, char*e2, char*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
Achar *achar_duplicates (Achar *this, int (feq)(char *e1, char *e2));

/// Returns this JSONized.
///   this: Container.
///   to  : Converter of container element to JSON.
char *achar_to_js (Achar *this, char *(*to)(char *e));

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
///   from: Converter from JSON to container element.
Achar *achar_from_js (char *js, char *(*from)(char *ejs));

//--// Not remove

#endif
