// Copyright 08-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[TpIntInt *].

#ifndef DMC_TPINTINT_ATPINTINT_H
  #define DMC_TPINTINT_ATPINTINT_H

#include "dmc/Arr.h"
#include "dmc/TpIntInt/OTpIntInt.h"

#include "dmc/TpIntInt.h"

/// Arr[TpIntInt *].
struct aTpIntInt_ATpIntInt {
  TpIntInt **es; // Start elements.
  TpIntInt **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  TpIntInt **endbf; // End buffer.
};

/// Arr[TpIntInt *].
typedef struct aTpIntInt_ATpIntInt ATpIntInt;

/// Creates a new Array with buffer size of 15 elements.
ATpIntInt *aTpIntInt_new (void);

/// 'buffer' must be > 0.
ATpIntInt *aTpIntInt_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
ATpIntInt *aTpIntInt_new_from (TpIntInt *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
ATpIntInt *aTpIntInt_new_c (int size, TpIntInt **es);

/// Returns a new array with elements of 'this'.
ATpIntInt *aTpIntInt_copy (ATpIntInt *this);

///
int aTpIntInt_size (ATpIntInt *this);

/// Resturn the element at position ix.
TpIntInt *aTpIntInt_get (ATpIntInt *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aTpIntInt_push (ATpIntInt *this, TpIntInt *e);

/// Returns and removes the last element.
TpIntInt *aTpIntInt_pop (ATpIntInt *this);

/// Returns the las element.
TpIntInt *aTpIntInt_peek (ATpIntInt *this);

/// Sets the element at position ix.
void aTpIntInt_set (ATpIntInt *this, int ix, TpIntInt *e);

/// Inserts an element at position ix.
void aTpIntInt_insert (ATpIntInt *this, int ix, TpIntInt *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aTpIntInt_remove (ATpIntInt *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aTpIntInt_cat (ATpIntInt *this, ATpIntInt *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aTpIntInt_insert_arr (ATpIntInt *this, int ix, ATpIntInt *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aTpIntInt_remove_range (ATpIntInt *this, int begin, int end);

/// Removes every element of 'this'.
void aTpIntInt_clear (ATpIntInt *this);

/// Reverses elements of 'this'.
void aTpIntInt_reverse (ATpIntInt *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aTpIntInt_sort (ATpIntInt *this, int (*greater)(TpIntInt *e1, TpIntInt *e2));

/// aTpIntInt_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aTpIntInt_shuffle (ATpIntInt *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aTpIntInt_all (ATpIntInt *this, int (*pred)(TpIntInt *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aTpIntInt_any (ATpIntInt *this, int (*pred)(TpIntInt *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aTpIntInt_index (ATpIntInt *this, int (*pred)(TpIntInt *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aTpIntInt_last_index (ATpIntInt *this, int (*pred)(TpIntInt *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OTpIntInt *aTpIntInt_find(ATpIntInt *this, int (*pred)(TpIntInt *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OTpIntInt *aTpIntInt_find_last(ATpIntInt *this, int (*pred)(TpIntInt *e));

/// aTpIntInt_filter_in removes every element which returns '0' with 'pred'.
void aTpIntInt_filter_in (ATpIntInt *this, int (*pred)(TpIntInt *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
ATpIntInt *aTpIntInt_take (ATpIntInt *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
ATpIntInt *aTpIntInt_takef (ATpIntInt *this, int (*predicate)(TpIntInt *e));

/// Returns a new Arr with elements left after aTpIntInt_take.
ATpIntInt *aTpIntInt_drop (ATpIntInt *this, int n);

/// Returns a new Arr with elements left after aTpIntInt_takef.
ATpIntInt *aTpIntInt_dropf (ATpIntInt *this, int (*predicate)(TpIntInt *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
ATpIntInt *aTpIntInt_filter_to (ATpIntInt *this, int (*predicate)(TpIntInt *e));

/// Returns a new Arr with elements generated by converter.
Arr *aTpIntInt_map (ATpIntInt *this, void *(*converter)(TpIntInt *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aTpIntInt_map2 (ATpIntInt *this, void *(*conv1)(TpIntInt *e), void *(*conv2)(TpIntInt *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aTpIntInt_zip (ATpIntInt *a1, ATpIntInt *a2, void *(*converter)(TpIntInt *e1, TpIntInt *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aTpIntInt_zip3 (
  ATpIntInt *a1, ATpIntInt *a2, ATpIntInt *a3,
  void *(*conveter)(TpIntInt*e1, TpIntInt*e2, TpIntInt*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
ATpIntInt *aTpIntInt_duplicates (ATpIntInt *this, int (feq)(TpIntInt *e1, TpIntInt *e2));

/// Returns this JSONized.
///   this: Container.
///   to  : Converter of container element to JSON.
char *aTpIntInt_to_js (ATpIntInt *this, char *(*to)(TpIntInt *e));

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
///   from: Converter from JSON to container element.
ATpIntInt *aTpIntInt_from_js (char *js, TpIntInt *(*from)(char *ejs));


//--// Not remove

#endif