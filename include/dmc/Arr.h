// Copyright 21-Nov-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Array structure.

#ifndef DMC_ARR_H
  #define DMC_ARR_H

#include "Opt.h"

/// Array structure
struct arr_Arr {
  void **es; // Start elements.
  void **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  void **endbf; // End buffer.
};

/// Array structure
typedef struct arr_Arr Arr;

/// Creates a new Array with buffer size of 15 elements.
Arr *arr_new (void);

/// 'buffer' must be > 0.
Arr *arr_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
Arr *arr_new_from (void *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
Arr *arr_new_c (int size, void **es);

/// Returns a new array with elements of 'this'.
Arr *arr_copy (Arr *this);

///
int arr_size (Arr *this);

/// Resturn the element at position ix.
void *arr_get (Arr *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void arr_push (Arr *this, void *e);

/// Returns and removes the last element.
void *arr_pop (Arr *this);

/// Returns the las element.
void *arr_peek (Arr *this);

/// Sets the element at position ix.
void arr_set (Arr *this, int ix, void *e);

/// Inserts an element at position ix.
void arr_insert (Arr *this, int ix, void *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void arr_remove (Arr *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void arr_cat (Arr *this, Arr *other);

/// Inserts pointer to elements of 'other' at 'ix'
void arr_insert_arr (Arr *this, int ix, Arr *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void arr_remove_range (Arr *this, int begin, int end);

/// Removes every element of 'this'.
void arr_clear (Arr *this);

/// Reverses elements of 'this'.
void arr_reverse (Arr *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void arr_sort (Arr *this, int (*greater)(void *e1, void *e2));

/// arr_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void arr_shuffle (Arr *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int arr_all (Arr *this, int (*pred)(void *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int arr_any (Arr *this, int (*pred)(void *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int arr_index (Arr *this, int (*pred)(void *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int arr_last_index (Arr *this, int (*pred)(void *e));

/// Returns the first element which pruduces '1' with 'pred' or 'opt_none'.
Opt *arr_find(Arr *this, int (*pred)(void *e));

/// Returns the last element which pruduces '1' with 'pred' or 'opt_none'.
Opt *arr_find_last(Arr *this, int (*pred)(void *e));

/// arr_filter_in removes every element which returns '0' with 'pred'.
void arr_filter_in (Arr *this, int (*pred)(void *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
Arr *arr_take (Arr *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'pred'.
Arr *arr_takef (Arr *this, int (*pred)(void *e));

/// Returns a new Arr with elements left after arr_take.
Arr *arr_drop (Arr *this, int n);

/// Returns a new Arr with elements left after arr_takef.
Arr *arr_dropf (Arr *this, int (*pred)(void *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
Arr *arr_filter_to (Arr *this, int (*pred)(void *e));

/// Returns a new Arr with elements generated by converter.
Arr *arr_map (Arr *this, void *(*converter)(void *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *arr_map2 (Arr *this, void *(*conv1)(void *e), void *(*conv2)(void *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *arr_zip (Arr *a1, Arr *a2, void *(*converter)(void *e1, void *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *arr_zip3 (
  Arr *a1, Arr *a2, Arr *a3, void*(*converter)(void*e1, void*e2, void*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
Arr *arr_duplicates (Arr *this, int (feq)(void *e1, void *e2));

/// Returns this JSONized.
///   this: Container.
///   to  : Converter of container element to JSON.
char *arr_to_js (Arr *this, char *(*to)(void *e));

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
///   from: Converter from JSON to container element.
Arr *arr_from_js (char *js, void *(*from)(char *ejs));

#endif
